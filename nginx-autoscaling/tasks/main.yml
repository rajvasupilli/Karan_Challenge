---
- name: Create Launch Template
  ec2_lc:
    name: "{{ launch_template_name }}"
    image_id: "{{ image_id }}"
    region: "{{ region }}"
    instance_type: "{{ instance_type }}"
    key_name: "{{ key_name }}"
    vpc_id: "{{ vpc_id }}"
    security_groups: "{{ security_group_name }}"
    user_data: "#!/bin/bash\nsudo apt update\nsudo apt install python3-pip\nsudo pip3 install boto3\nsudo apt install -y nginx\necho '{{ nginx_custom_page }}' > /usr/share/nginx/html/index.html"
  register: launch_template_result

- name: Create the security group
  ec2_group:
    name: "{{ security_group_name }}"
    description: "Allow HTTPS traffic"
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0

- name: Create the auto scaling group
  ec2_asg:
    name: "{{ asg_name }}"
    launch_config_name: "{{ asg_name }}-launch-config"
    region: "{{ region }}"
    instance_type: "{{ instance_type }}"
    image_id: "{{ ami_id }}"
    key_name: "{{ key_name }}"
    security_groups: ["{{ security_group_name }}"]
    desired_capacity: "{{ desired_capacity }}"
    min_size: "{{ min_size }}"
    max_size: "{{ max_size }}"

- name: Wait for instances to become available
  local_action:
    module: wait_for
    host: "{{ item.id }}"
    port: 22
    delay: 10
    timeout: 320
    state: started
  with_items: "{{ ec2_asg.instances }}"

- name: Set up HTTPS with a default certificate
  become: true
  lineinfile:
    path: /etc/nginx/conf.d/default.conf
    line: |
      server {
        listen 443 ssl;
        server_name example.com;
        ssl_certificate /etc/pki/tls/certs/localhost.crt;
        ssl_certificate_key /etc/pki/tls/private/localhost.key;
        location / {
          root /usr/share/nginx/html;
          index index.html;
        }
      }
  notify: Reload_Nginx

- name: Reload_Nginx
  become: true
  service:
    name: nginx
    state: restarted

