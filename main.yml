---
- name: Create EC2 Key Pair
  ec2_key:
    name: "{{ keypair_name }}"
    region: "{{ region }}"
  register: ec2_keypair

- name: Save the private key
  copy:
    content: "{{ ec2_keypair.key.private_key }}"
    dest: "{{ keypair_file }}"
    mode: 0400
  when: ec2_keypair.changed

- name: Create the security group
  ec2_group:
    name: "{{ security_group_name }}"
    description: "Allow HTTPS traffic"
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0

- name: Create Launch Configuration
  ec2_lc:
    name: "{{ lc_name }}"
    image_id: "{{ image_id }}"
    key_name: "{{ keypair_name }}"
    instance_type: "{{ instance_type }}"
    region: "{{ region }}"
    security_groups: "{{ security_group_name }}"
    user_data: |
      #!/bin/bash
      apt-get update -y
      apt-get install nginx -y
      echo '{{ nginx_custom_page }}' > /usr/share/nginx/html/index.html
  register: launch_config

- name: Create the auto scaling group
  ec2_asg:
    name: "{{ auto_scaling_group_name }}"
    launch_config_name: "{{ lc_name }}"
    region: "{{ region }}"
    desired_capacity: "{{ desired_capacity }}"
    min_size: "{{ min_size }}"
    max_size: "{{ max_size }}"
    availability_zones: "{{ availability_zones }}"
    tags:
      - key: Name
        value: "{{ auto_scaling_group_name }}"
    wait_for_instances: yes
    health_check_type: EC2
  register: ec2

- name: Set up HTTPS with a default certificate
  become: true
  lineinfile:
    path: /etc/nginx/conf.d/default.conf
    line: |
      server {
        listen 443 ssl;
        server_name example.com;
        ssl_certificate /etc/pki/tls/certs/localhost.crt;
        ssl_certificate_key /etc/pki/tls/private/localhost.key;
        location / {
          root /usr/share/nginx/html;
          index index.html;
        }
      }
  notify: Reload_Nginx

- name: Reload_Nginx
  become: true
  service:
    name: nginx
    state: restarted

